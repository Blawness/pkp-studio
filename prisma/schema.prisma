// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // The following line is not needed for the Prisma Data Proxy, but is required
  // for the Accelerate and Edge runtimes.
  // @see https://www.prisma.io/docs/orm/prisma-client/client-extensions/edge
  previewFeatures = ["clientExtensions"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Certificate {
  id                  String   @id @default(cuid())
  kode                String
  nama_pemegang       Json
  surat_hak           String
  no_sertifikat       String   @unique
  lokasi_tanah        String   @db.Text
  luas_m2             Int
  tgl_terbit          DateTime
  surat_ukur          String
  nib                 String   @unique
  pendaftaran_pertama DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  attendances Attendance[]
}

model ActivityLog {
  id        String   @id @default(cuid())
  user      String
  action    String
  details   String
  payload   Json?
  timestamp DateTime @default(now())
}

model TanahGarapanEntry {
    id                         String    @id @default(cuid())
    letakTanah                 String
    namaPemegangHak            String
    letterC                    String
    nomorSuratKeteranganGarapan String
    luas                       Int
    keterangan                 String?   @db.Text
    createdAt                  DateTime  @default(now())
    updatedAt                  DateTime  @updatedAt
}

model Attendance {
  id        String    @id @default(cuid())
  date      DateTime  @db.Date
  checkIn   DateTime
  checkOut  DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, date])
}